 Text : 

 In the above Graph we can see that it shows the difference between the Recursive and iterative algorithms in time complexity
 specifically methods for calculating the fibonacci and sum of cubes in both iterative and recursive in c programming language i saved the time in a text file 
 and the text file is give as input to the python code with the help of seaborn library we generated the graph 


the x-axis is represents the input size and y-axis represents the time taken to compile in micro seconds 

1. Recursive Fibonacci : 
An recursive implementation of the Fibonacci computation is likely to have an exponential time complexity. The time required in the graph rises rapidly as input sizes increase. This points to an O(2^n) time complexity, where 'n' is the Fibonacci number that is being calculated.

2. iterative fibonacci:
A linear or perhaps constant time complexity is shown by the time required remaining constant across inputs. The time complexity of an iterative Fibonacci method is typically O(n), since it computes each number in the sequence only once over a single loop that runs from 0 to 'n'.

3. recursive sum of cube :
The time complexity of a  recursive function, where 'n' is the number of terms being summed, is O(n). This method computes the sum of cubes by recursively summing the cube of 'n' plus the sum of cubes of all numbers less than 'n'. This is due to the fact that every function call computes one cube before making one recursive call for the subsequent term.

4. iterative sum of cunes function :
The time complexity of an iterative implementation is typically O(n). It entails computing each number's cube and adding it to an variable using a loop that runs from 1 to 'n'.

as we see iterative methods are much faster than recusrive methods from the abopve Observations.
